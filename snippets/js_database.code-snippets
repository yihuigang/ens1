{
  "js-database-query-find": {
    "prefix": "find",
    "body": [
      "$.queryService.select(\"query_name\").eq(\"column\", \"\").find(); // 查询数据"
    ],
    "description": "query查询单条"
  },
  "js-database-query-find-limit": {
    "prefix": "find-limit",
    "body": [
      "$.queryService.select(\"query_name\").eq(\"column\", \"\").find(0,200); // 查询指定行数数据"
    ],
    "description": "query查询指定行数数据"
  },
  "js-database-query-findAll": {
    "prefix": [
      "findAll",
      "select",
      "query"
    ],
    "body": [
      "$.queryService.select(\"query_name\").eq(\"column\", \"\").findAll(); // 查询数据"
    ],
    "description": "query查询多条"
  },
  "js-database-query-findAll-column": {
    "prefix": [
      "findAll-column",
      "select-column",
      "query-column"
    ],
    "body": [
      "$.queryService.select(\"query_name\").eq(\"column\", \"\").findAll(\"column1\",\"column2\"); // 查询数据"
    ],
    "description": "query查询多条指定列"
  },
  "js-database-query-sql": {
    "prefix": [
      "sql-query",
      "select-sql"
    ],
    "body": [
      "$.jdbcTemplate.queryForList(sql); // 查询数据"
    ],
    "description": "sql查询，直接使用sql查询，不受条数限制"
  },
  "js-database-insert": {
    "prefix": "insert",
    "body": [
      "$.queryService.insert(\"model\",map); // 插入数据"
    ],
    "description": "插入数据"
  },
  "js-database-insert-batch": {
    "prefix": "insert-batch",
    "body": [
      "$.queryService.batchInsert(\"model\", array);// 批量插入数据"
    ],
    "description": "批量插入数据"
  },
  "js-database-update-set": {
    "prefix": "update",
    "body": [
      "$.queryService.createUpdate(\"model\").set(\"column\", value).eq(\"id\", id).update();// 更新数据"
    ],
    "description": "更新数据"
  },
  "js-database-update-row": {
    "prefix": "update-row",
    "body": [
      "$.queryService.update(\"model\", row);// 更新整行数据"
    ],
    "description": "更新整行数据"
  },
  "js-database-update-batch": {
    "prefix": "update-batch",
    "body": [
      "$.queryService.batchUpdate(\"model\", array, [\"column1\", \"column2\"]);// 批量更新数据"
    ],
    "description": "批量更新数据"
  },
  "js-database-delete": {
    "prefix": "delete",
    "body": [
      "$.queryService.delete(\"model\").eq(\"column\", value).execute();// 删除"
    ],
    "description": "删除"
  },
  "js-oracle-jar": {
    "prefix": "jar-oracle",
    "body": [
      "// 执行oracle数据库操作相关的jar包",
      "var CallableStatementCreator = Java.type('org.springframework.jdbc.core.CallableStatementCreator');",
      "var CallableStatementCallback = Java.type('org.springframework.jdbc.core.CallableStatementCallback');",
    ],
    "description": "执行oracle数据库操作相关的jar包"
  },
  "js-oracle-function": {
    "prefix": "function-oracle",
    "body": [
      "// 执行oracle函数",
      "var result;",
      "$.queryService.jdbcTemplate.execute(",
      "   new CallableStatementCreator({",
      "      createCallableStatement: function (con) {",
      "          try {",
      "              var cs = con.prepareCall('{?=call glogowner.OPPO_EXCHANGE_RATE(?,?,?,?,?)}');",
      "              cs.registerOutParameter(1, \"3\"); //注册输出参数的类型,Types.DECIMAL=3",
      "              cs.setString(2, str1);",
      "              cs.setString(3, str2);",
      "              return cs;",
      "          } catch (e) {",
      "              throw e;",
      "          }",
      "      }",
      "   }),",
      "   new CallableStatementCallback({",
      "      doInCallableStatement: function (cs) {",
      "         try {",
      "            cs.execute();  // 执行函数",
      "            result = cs.getBigDecimal(1);",
      "            return result;",
      "        } catch (e) {",
      "            throw e;",
      "        } finally {",
      "            if (cs != null) cs.close();",
      "        }",
      "     }",
      "  })",
      ");",
      "return result;"
    ],
    "description": "执行oracle函数"
  },
  "js-oracle-procedure": {
    "prefix": "procedure-oracle",
    "body": [
      "// 执行oracle存储过程",
      "$.queryService.jdbcTemplate.execute(",
      "   new CallableStatementCreator({",
      "      createCallableStatement: function(con) {",
      "         try {",
      "            var cs = con.prepareCall('{call pro(?,?)}')",
      "            cs.setString(1, str1)",
      "            cs.setString(2, str2)",
      "            return cs",
      "         }",
      "         catch(e) {throw e;}",
      "      }",
      "   }),",
      "   new CallableStatementCallback({",
      "      doInCallableStatement: function(cs) {",
      "         try {cs.execute();} // 执行存储过程",
      "         catch(e) {throw e;}",
      "         finally { if (cs != null) cs.close();}",
      "      }",
      "   });",
      ");",
    ],
    "description": "执行oracle存储过程"
  }
}