{
  "js-actions": {
    "prefix": "actions",
    "body": [
      "// action方法\nactions.actionExample = function ($, namespace, request, response) {",
      "  var actionData = request.body;",
      "  var rows = actionData.selectedRows;",
      "  rows.forEach(function (row) {\n\n      });",
      "  response.code = 'refresh';",
      "  response.message = '操作完成';",
      "}"
    ],
    "description": "action方法"
  },
  "js-actions-response-redirect": {
    "prefix": [
      "redirect",
      "zhidingtiaoz"
    ],
    "body": [
      "   var redirect = {path: '/l/layout'}",
      "   response.code = 'redirect';",
      "   response.data = redirect;",
      "   response.message = '操作完成';"
    ],
    "description": "指定跳转"
  },
  "js-tasks": {
    "prefix": [
      "tasks",
      "计划任务"
    ],
    "body": [
      "// 计划任务\ntasks.taskFunction = function ($, taskContext) {",
      "    var lockService = $.getLockService();",
      "    var lock = lockService.getLock(taskContext.handlerName + \".lock\");",
      "    var lockOn = lock.tryLock(1800, java.util.concurrent.TimeUnit.SECONDS);",
      "    if (!lockOn) {\n        throw \"任务执行中,请等待任务执行完成！\";\n    }",
      "    try {\n\n    } catch (e) {\n        throw e;\n    } finally {\n        lock.unlock();\n    }",
      "};"
    ],
    "description": "计划任务方法"
  },
  "js-reports": {
    "prefix": [
      "report",
      "print",
      "报表打印"
    ],
    "body": [
      "reports.reportFunction = function ($, actionData) {// 打印方法",
      "   var rows = actionData.selectedRows",
      "   var headList = common.arrayList();",
      "   var paras = common.hashMap();",
      "   var lineMap = common.hashMap();",
      "   rows.forEach(function (row) {",
      "   });",
      "   var row=rows[0];",
      "   headList.add(row);",
      "   var head_id=row.id;",
      "   var linelist = $.getQueryService().select(\"query_line\").eq(\"head_id\", row.id).findAll();//查询子表数据",
      "   var dataSource = new ListMapDataSource(linelist);",
      "   lineMap.put(head_id, dataSource);",
      "   var paras = common.hashMap();",
      "   paras.put(\"line_data_key\", lineMap);",
      "   paras.put(\"line_jspaper_key\", $.getReportService().getJasperReport(\"line_jspaper_name\"));",
      "   return new ReportData(\"head_jspaper_name\", headList, paras);",
      "}"
    ],
    "description": "报表打印方法"
  },
  "js-event": {
    "prefix": [
      "event",
      "事件"
    ],
    "body": [
      "// 事件处理方法\neventHandlers.eventFunction = function ($, event) {",
      "   var data = event.data.data;",
      "   if(data.header!=null){",
      "      data.header.settle_pay=data.header.pre_pay;\n}",
      "   else{\n      data.settle_receive=data.pre_receive;\n   }\n}"
    ],
    "description": "事件处理方法"
  },
  "js-common": {
    "prefix": [
      "common",
      "公共方法"
    ],
    "body": [
      "// 公共方法\ncommon.commonFunction = function($,data){\n\n}"
    ],
    "description": "公共方法"
  },
  // 接口
  "js-interface-callin": {
    "prefix": [
      "callin",
      "外部调用本接口"
    ],
    "body": [
      "// 外部调用本接口",
      "httpHandlers.callinExample = {",
      "  post: function ($, httpRequest, httpResponse) {",
      "    try {",
      "      var bodyJson = common.streamUtils.copyToString(httpRequest.getInputStream(), common.charsets.UTF_8)",
      "      bodyJson = java.net.URLDecoder.decode(bodyJson, \"UTF-8\");",
      "      var jsonTree = common.fromJson(bodyJson);",
      "    } catch (e) {thorw e}",
      "  }",
      "}",
      "httpHandlers.callinExample.user = \"DEFAULT.ADMIN\""
    ],
    "description": "外部调用本接口"
  },
  // 导入
  "js-function-import": {
    "prefix": [
      "import_function",
      "导入方法"
    ],
    "body": [
      "// 导入方法示例",
      "var ReportData = Java.type(\"logwire.core.meta.report.ReportData\");",
      "var Maps = Java.type(\"com.google.common.collect.Maps\");",
      "var Lists = Java.type(\"com.google.common.collect.Lists\");",
      "var ListMapDataSource = Java.type(\"logwire.web.service.report.ListMapDataSource\");",
      "actions.importExample = function ($, namespace, request, response) {",
      "  var rows = request.body.selectedRows;//获取从excel导入的数据",
      "  var pageRows = request.body.aux.selectRows;//获取从页面的数据",
      "  var failCount = 0; //失败数量",
      "  var errorMsg = \"\"; //错误信息，将所有错误提示归集到一条信息显示给用户",
      "  var pageRow = pageRows[0];",
      "  rows.forEach(function (row) {",
      "    var rowNew = common.hashMap();",
      "    $.queryService.insert(\"model_name\", rowNew);",
      "  });",
      "  if (failCount > 0) {",
      "    response.message = \"导入完成，共\" + rows.length + \"条，失败\" + failCount + \"条。<br/>失败详细信息：\" + errorMsg;",
      "  }",
      "  else {",
      "    response.message = \"导入完成，共\" + rows.length + \"条。\";",
      "  }",
      "}"
    ],
    "description": "自定义导入方法"
  },
  // 导出
  "js-function-export": {
    "prefix": [
      "export_function",
      "导出方法"
    ],
    "body": [
      "// 自定义导出方法示例",
      "// 导出自定义写法，lw-button控件属性配置如下：event=\"servlet-action\" action=\"export_action\"",
      "servletActions.export_action = function ($, namespace, request, response) {",
      "  var queryName = namespace;",
      "  var actionData = request.body;",
      "  var rows = actionData.selectedRows;// 取页面数据",
      "  var listrows = common.arrayList();// 存储需要打印的数据",
      "  // 遍历头表数据，通过头表的ID，获取所有头表的明细，并打印出来",
      "  rows.forEach(function (row) {// 循环遍历",
      "      var lines = $.queryService.select(\"model_line\").eq(\"head_id\", row.id).findAll(); // 查询明细数据",
      "      lines.forEach(function (line) {",
      "          listrows.add(line);// 将每条明细数据，存储在需要打印的list中",
      "      });",
      "  });",
      "  actionData.selectedRows = listrows;// 设置请求数据为需要打印的数据",
      "  var auxData = common.hashMap();",
      "  auxData.put(\"code\", \"export_line\");// 配置数据规则转换代码（导出规则）",
      "  request.body.aux = auxData;",
      "  rows = listrows;",
      "  var ResponseData = Java.type(\"logwire.web.service.ResponseData\");// 响应类实例化",
      "  var responseData = new ResponseData();// 定义响应变量",
      "  responseData.setResponse(response);// 设置响应参数",
      "  request.body.selectedForm = null;",
      "  // 参数解释：",
      "  // model_line/model名称",
      "  // adaptExport：固定写法，表示执行的action类型",
      "  // request：固定写法，表示请求数据",
      "  // responseData：固定写法，表示响应数据",
      "  $.action(\"model_line\", \"adaptExport\", request, responseData);",
      "  response.code = \"none\";",
      "  response.message = \"导出成功\";",
      "}"
    ],
    "description": "自定义导出方法"
  },
  // 加载
  // 工作流获取用户方法示例
  "js-approve-getusers": {
    "prefix": [
      "get-user",
      "获取审批用户"
    ],
    "body": [
      "/**",
      "* 获取工作流节点审批用户公用函数",
      "* @param {*} queryService  queryService对象",
      "* @param {*} bill 工作流审批对象，如：应收对账单完成确认等",
      "* @param {*} users 工作流节点审批角色下用户",
      "* @param {*} type 审批角色类型",
      "*/",
      "var getApproveUsers = function (queryService, bill, users, type, workflow) {",
      "}]"
    ],
    "description": "获取审批用户"
  },
  // 计费事务执行方法示例
  "js-rate-after-function": {
    "prefix": [
      "rate-after-function",
      "计费后执行"
    ],
    "body": [
      "/**\n * 计费后执行字段回写到计费凭据\n * @param $\n * @param bill 计费单据（凭据query）\n * @param costBills 计费结果费用（value：costBill；bizBill.value：计费单据（凭据query））\n * 参数bill中的是计费单据数据，参数costBills中是费用数据。\n*/",
      "common.voucherWrite = function ($, bill,costBills) {",
      "   costBills.forEach(function (costbill) {",
      "       costbill.getBizBill().getValue().put(\"voucher_column\", str1);",
      "   });",
      "};"
    ],
    "description": "计费后执行方法"
  }
}